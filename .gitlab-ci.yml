variables:
  _R_CHECK_CRAN_INCOMING_: "false"
  _R_CHECK_FORCE_SUGGESTS_: "true"
  DOCKER_REGISTRY: "registry.gitlab.com"
  IMAGE_PATH: "kapsner"
  CI_IMAGE_NAME: "${DOCKER_REGISTRY}/${IMAGE_PATH}/${CI_PROJECT_NAME}/${CI_PROJECT_NAME}_base_image"
  R_PKG_NAME: "baseApp"
  CI_IMAGE_TAG: "0.0.1"
# https://docs.gitlab.com/ee/user/packages/container_registry/#enable-the-container-registry-for-your-project

.docker_registry:
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} ${DOCKER_REGISTRY} --password-stdin
  after_script:
    - docker logout ${DOCKER_REGISTRY}

default:
  image: ${CI_IMAGE_NAME}:${CI_IMAGE_TAG}

# https://gitlab.com/gitlab-org/gitlab/issues/22801
build_base_image:
  stage: dependencies
  image: docker:stable
  extends: .docker_registry
  script:
    - cd .. && docker build --build-arg PKG_NAME=${R_PKG_NAME} -t ${CI_IMAGE_NAME}:${CI_IMAGE_TAG} -f ${CI_PROJECT_NAME}/ci/Dockerfile .
    - docker push ${CI_IMAGE_NAME}
  only:
    # build only when there are changes in dependencies
    changes:
      - "data-raw/devstuffs.R"
      - "ci/Dockerfile"
  tags:
    - docker

stages:
  - dependencies
  - build
  - test
  - deploy

check:
  stage: build
  script:
    - R -e "devtools::check(pkg = '.', args = c('--no-tests'), build_args = c('--no-build-vignettes'), check_dir = '${CI_PROJECT_DIR}/ci')"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.Rcheck"
    when: on_failure # upload check artifacts when job fails!
    expire_in: 1 week

create_manual:
  stage: build
  script:
    - R -e "devtools::build_manual(pkg = '.', path = '${CI_PROJECT_DIR}/ci')"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.pdf"
    expire_in: 1 week

build_source:
  stage: build
  script:
    - R -e "devtools::build(pkg = '.', path = '${CI_PROJECT_DIR}/ci', binary = FALSE, vignettes = FALSE)"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.tar.gz"
    expire_in: 1 week

build_binary:
  stage: build
  script:
    - R -e "devtools::build(pkg = '.', path = '${CI_PROJECT_DIR}/ci', binary = TRUE, vignettes = FALSE)"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.tar.gz"
    expire_in: 1 week

# To have the coverage percentage appear as a gitlab badge follow these
# instructions:
# https://docs.gitlab.com/ee/user/project/pipelines/settings.html#test-coverage-parsing
# The coverage parsing string is
# Coverage: \d+\.\d+

coverage:
  stage: test
  allow_failure: true
  when: on_success
  script:
    - R -e "install.packages('DT')"
    - R -e "covr::gitlab(quiet = FALSE)"
  artifacts:
    paths:
      - public

testing:
  stage: test
  allow_failure: true
  when: on_success
  script:
    - R -e "devtools::test(pkg = '.')"

# To produce a code coverage report as a GitLab page see
# https://about.gitlab.com/2016/11/03/publish-code-coverage-report-with-gitlab-pages/

install:
  stage: deploy
  script:
    - R -e "devtools::install(pkg = '.', upgrade = 'always')"
